# суммирование элементов двух векторов

Ссылка на **[google colab](https://colab.research.google.com/drive/1UypPVG-tVysH46NCGtl7jGJzWN6BD1Ig?usp=sharing)**

### Алгоритм работы: 
1. Генерируем векторы А и В с рандомными значениями из нормального распределения, размерами от 1000 до 1000000
2. Производим сложение векторов на CPU, используя функцию `CPU_VectorSum`
3. Рассчитывае время сложения веткоров на CPU
4. Производим сложение векторов на GPU, используя функцию `GPU_VectorSum`
5. Рассчитывае время сложения веткоров на GPU
6. Сравниваем результаты сложения на СPU и GPU - `np.allclose(CPU_VectorSum(A, B), GPU_VectorSum(A, B))`
7. Вывод результатов в виде графиков.

### Как происходило вычисление суммы на GPU?

В функции `GPU_VectorSum(A, B)` создается вектор С (на CPU), в который будут записываться результаты сложения. Затем векторы А, В, С копируются на 
устройство (GPU). `VectorSum_in_GPU.forall(len(A))(A_gpu, B_gpu, C_gpu)` - генерирует соотвествующую конфигурацию ядра с 1D-сеткой. Далее полученный 
результат передаем на хост(на CPU). В фнукции `def VectorSum_in_GPU` создается сетка ядра для вектора, которая заполняется результатами суммирования 
до тех пор, пока не достигнет размеров выходного вектора С. 

Распараллеливание заключается в том, что сложение каждых двух элементов вектора выполняется одним потоком в сетке.    

### Графики времени умножения и ускорения: 
![Графики времени умножения и ускорения](https://github.com/vmokook/HPC-2023/blob/main/MatMul/1.png)
